datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    // 기본 User 정보
    id          Int @id @default(autoincrement())
    firstName   String
    lastName    String?
    userName    String  @unique
    email       String  @unique
    password    String
    bio         String?
    avatar      String?
    // Post 시스템
    photos      Photo[]
    likes       Like[]
    comments    Comment[]
    // Follow 시스템
    following   User[] @relation("FollowRelation", references:[id])
    followers   User[] @relation("FollowRelation", references:[id])

    // 채팅 시스템
    rooms       Room[]
    messages    Message[]
    // 날짜 정보
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Photo {
    // 기본 정보
    id          Int         @id @default(autoincrement())
    user        User        @relation(fields: [userId], references:[id])
    userId      Int
    file        String
    caption     String?
    hashtags    Hashtag[]
    likes       Like[]
    comments    Comment[]
    // 날짜 정보
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Hashtag {
    id          Int         @id @default(autoincrement())
    hashtag     String      @unique
    photos      Photo[]
    // 날짜 정보
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Like {
    id          Int         @id @default(autoincrement())
    user        User        @relation(fields: [userId], references:[id])
    photo       Photo       @relation(fields: [photoId], references:[id])
    userId      Int
    photoId     Int       
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    // 좋아요는 여러번 중첩할 수 없다.
    @@unique([userId,photoId])
}

model Comment {
    id          Int         @id @default(autoincrement())
    payload     String
    user        User        @relation(fields: [userId], references:[id])
    photo       Photo       @relation(fields: [photoId], references:[id])
    userId      Int
    photoId     Int       
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Room {
    id          Int         @id @default(autoincrement())
    users       User[]
    messages    Message[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Message {
    id          Int         @id @default(autoincrement())
    payload     String
    user        User        @relation(fields: [userId],references:[id])
    userId      Int
    room        Room        @relation(fields: [roomId],references:[id])
    roomId      Int
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}